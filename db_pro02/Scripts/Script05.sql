SELECT ROWNUM
	  ,FIRST_NAME
	  ,LAST_NAME
	  ,SALARY
	  ,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL --여기까지는 ROWUNUM부여되어 있는 상태
	ORDER BY SALARY;				 --부여 후 정렬을 하면 섞여버린다
	

SELECT ROWNUM
	  ,FIRST_NAME
	  ,LAST_NAME
	  ,SALARY
	  ,COMMISSION_PCT
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL 
		AND ROWNUM <= 15   -- 여기까지만 실행하면 제대로 ROWNUM 기능이 순차적으로 정렬된 것을 확인할 수 있다.
	ORDER BY SALARY DESC;


-- TOP-N 분석 : 미리 정렬된 쿼리를 만들고 조회
SELECT *
	FROM(SELECT  FIRST_NAME
	 			,LAST_NAME
	  			,SALARY
	  			,COMMISSION_PCT
			FROM EMPLOYEES
			WHERE COMMISSION_PCT IS NOT NULL
			ORDER BY SALARY DESC
	)
WHERE ROWNUM <= 15;
	
WITH EMP_COM
	AS (SELECT  FIRST_NAME
	 			,LAST_NAME
	  			,SALARY
	  			,COMMISSION_PCT
			FROM EMPLOYEES
			WHERE COMMISSION_PCT IS NOT NULL
			ORDER BY SALARY DESC)
SELECT * FROM EMP_COM;

SELECT 	 FIRST_NAME
	 	,LAST_NAME
	  	,SALARY
	  	,RANK() OVER(ORDER BY SALARY DESC) AS 순위 
		FROM EMPLOYEES;

SELECT 	 FIRST_NAME
	 	,LAST_NAME
	  	,SALARY
	  	,DENSE_RANK()OVER(ORDER BY SALARY DESC) AS 순위
		FROM EMPLOYEES;
		
	
SELECT *	--서브쿼리 없이 조건절 사용하면 오류발생 
FROM(SELECT FIRST_NAME
	 	   ,LAST_NAME
	  	   ,SALARY
	  	   ,RANK() OVER(ORDER BY SALARY DESC) AS 순위 
		FROM EMPLOYEES
		)
WHERE 순위 <= 5;
	

SELECT * --오라클 전용 방식
	FROM EMPLOYEES E, DEPARTMENTS D -- 별칭을 사용하여 가독성을 높이는 방법
	WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID; -- 결합조건(테이블명을 명시하는 것이 좋다)

SELECT *
	FROM EMPLOYEES E
	JOIN DEPARTMENTS D
	 ON E.DEPARTMENT_ID = E.DEPARTMENT_ID; -- ON: 공통 컬럼명
	
SELECT *
	FROM EMPLOYEES E
	JOIN DEPARTMENTS D
	 USING (DEPARTMENT_ID); -- USING: 공통 컬럼명
	
	 
SELECT * 
	FROM EMPLOYEES E
	LEFT JOIN DEPARTMENTS D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
	WHERE E.EMPLOYEE_ID =178;
	 
	 
SELECT * 
	FROM EMPLOYEES E
	RIGHT JOIN DEPARTMENTS D
		ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT * 
	FROM EMPLOYEES E, DEPARTMENTS D
	WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);	
	
	
SELECT * 
	FROM EMPLOYEES E, DEPARTMENTS D
	WHERE E.DEPARTMENT_ID(+) = D.DEPARTMENT_ID;

--카데시안 곱
SELECT COUNT(*)
	FROM EMPLOYEES
	CROSS JOIN DEPARTMENTS;

SELECT X * Y AS TOTAL
	FROM (SELECT(SELECT COUNT(*) FROM EMPLOYEES) AS X
			   ,(SELECT COUNT(*) FROM DEPARTMENTS) AS Y
			   FROM DUAL
			   );
			  
SELECT * 
 	FROM EMPLOYEES E
	JOIN JOBS J
		ON(E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY); --일정범위에 포함이 되면 JOIN / NON+EQU JOIN 이라 한다.

SELECT *
	FROM EMPLOYEES E1
	JOIN EMPLOYEES E2
	ON E1.EMPLOYEE_ID = E2.MANAGER_ID; --SELF JOIN 
	
	COMMIT;
	